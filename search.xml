<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>定长滑动窗口</title>
      <link href="/2024/032647144.html"/>
      <url>/2024/032647144.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>题目会根据顺序，难度逐渐上升。</p><p>“那些看似不起波澜的日复一日，会在某天让你看到坚持的意义。”</p><h2 id="1456-定长子串中元音的最大数目"><a href="#1456-定长子串中元音的最大数目" class="headerlink" title="1456. 定长子串中元音的最大数目"></a><a href="https://leetcode.cn/problems/maximum-number-of-vowels-in-a-substring-of-given-length/">1456. 定长子串中元音的最大数目</a></h2><h3 id="题目描述：难度分1263"><a href="#题目描述：难度分1263" class="headerlink" title="题目描述：难度分1263"></a>题目描述：难度分1263</h3><p><img src="https://formyblog-1316637577.cos.ap-guangzhou.myqcloud.com/img/image-20240324181044654.png" alt="image-20240324181044654"></p><h3 id="代码与解题思路"><a href="#代码与解题思路" class="headerlink" title="代码与解题思路"></a>代码与解题思路</h3><p>思路比较简单，这里就不赘述了，之后思路比较简单明了的题目都不会过多分析题目</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">maxVowels</span><span class="params">(s <span class="type">string</span>, k <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    l, r, n, cnt, ans := <span class="number">0</span>, <span class="number">0</span>, <span class="built_in">len</span>(s), <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> r &lt; n &#123;</span><br><span class="line">        <span class="keyword">if</span> check(s[r]) == <span class="literal">true</span> &#123;</span><br><span class="line">            cnt++</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> r-l &gt; k<span class="number">-1</span> &#123; <span class="comment">// 定长窗口, 所以可以用 if, 用 for 也行</span></span><br><span class="line">            <span class="keyword">if</span> check(s[l]) == <span class="literal">true</span> &#123;</span><br><span class="line">                cnt--</span><br><span class="line">            &#125;</span><br><span class="line">            l++</span><br><span class="line">        &#125;</span><br><span class="line">        r++</span><br><span class="line">        ans = max(ans, cnt)</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">check</span><span class="params">(s <span class="type">byte</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> strings.Contains(<span class="string">&quot;aeiou&quot;</span>, <span class="type">string</span>(s))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代码复盘"><a href="#代码复盘" class="headerlink" title="代码复盘"></a>代码复盘</h3><p>这段代码有什么可以学习和积累的地方吗？</p><p>1、判断函数 check 使用：strings.Contains(“aeiou”, string(s))，巧妙的方式判断一个字符是否在一个字符集合中，以本题为例：用于判断当前字符是否是元音字母</p><p>2、定长滑动窗口如何判断是否达到题目要求的长度：if r-l &gt; k-1 表明已经超过了题目要求的长度，可以 ”滑动“ 窗口了</p><p>3、每轮循环最后，稳定进行：r++ 和维护最大&#x2F;最小值的行为</p><p>我们带着学习到的知识，继续做下一道题目</p><h2 id="2269-找到一个数字的-K-美丽值"><a href="#2269-找到一个数字的-K-美丽值" class="headerlink" title="2269. 找到一个数字的 K 美丽值"></a><a href="https://leetcode.cn/problems/find-the-k-beauty-of-a-number/">2269. 找到一个数字的 K 美丽值</a></h2><h3 id="题目描述：难度分1280"><a href="#题目描述：难度分1280" class="headerlink" title="题目描述：难度分1280"></a>题目描述：难度分1280</h3><p><img src="https://formyblog-1316637577.cos.ap-guangzhou.myqcloud.com/img/image-20240324181021974.png" alt="image-20240324181021974"></p><h3 id="代码与解题思路-1"><a href="#代码与解题思路-1" class="headerlink" title="代码与解题思路"></a>代码与解题思路</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">divisorSubstrings</span><span class="params">(num <span class="type">int</span>, k <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    s := strconv.Itoa(num)</span><br><span class="line">    l, r, ans, n := <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="built_in">len</span>(s)</span><br><span class="line">    <span class="keyword">for</span> r &lt; n &#123;</span><br><span class="line">        t, _ := strconv.Atoi(s[l:r+<span class="number">1</span>])</span><br><span class="line">        <span class="keyword">if</span> r-l == k<span class="number">-1</span> &amp;&amp; check(num, t) == <span class="literal">true</span> &#123; <span class="comment">// 达到题目要求之后再 check</span></span><br><span class="line">            ans++</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> r-l == k<span class="number">-1</span> &#123; <span class="comment">// 在达到长度 k 之后, 每次都进行 l++ 和 r++, 保持前进</span></span><br><span class="line">            l++</span><br><span class="line">        &#125;</span><br><span class="line">        r++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">check</span><span class="params">(num, t <span class="type">int</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> t == <span class="number">0</span> &#123; <span class="comment">// t 不能为 0</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num%t == <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代码复盘-1"><a href="#代码复盘-1" class="headerlink" title="代码复盘"></a>代码复盘</h3><p>依旧是使用同一个模板，但有些细节的地方需要注意</p><p>1、整数转字符串不能用 string(num) 而需要用 strconv.Itoa(num)</p><p>2、根据题目不同的情况和要求，注意判断 l 窗口边界移动的时机</p><p>3、使用取模运算的时候，计算的数字不能为 0</p><h2 id="1984-学生分数的最小差值"><a href="#1984-学生分数的最小差值" class="headerlink" title="1984. 学生分数的最小差值"></a><a href="https://leetcode.cn/problems/minimum-difference-between-highest-and-lowest-of-k-scores/">1984. 学生分数的最小差值</a></h2><h3 id="题目描述：难度分1306"><a href="#题目描述：难度分1306" class="headerlink" title="题目描述：难度分1306"></a>题目描述：难度分1306</h3><p><img src="https://formyblog-1316637577.cos.ap-guangzhou.myqcloud.com/img/image-20240324180956676.png" alt="image-20240324180956676"></p><h3 id="代码与解题思路-2"><a href="#代码与解题思路-2" class="headerlink" title="代码与解题思路"></a>代码与解题思路</h3><p>题目要求的是 k 个数之间的最高分和最低分的最小差值，在排序之后，让最右边的数 - 最左边的数，得到的就是这个区间最高分和最低分的差值了，再求所有区间的最小值就能求出题目要求的答案了</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">minimumDifference</span><span class="params">(nums []<span class="type">int</span>, k <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    sort.Ints(nums)</span><br><span class="line">    ans := nums[k<span class="number">-1</span>] - nums[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> i := k; i &lt; <span class="built_in">len</span>(nums); i++ &#123;</span><br><span class="line">        ans = min(ans, nums[i]-nums[i-k+<span class="number">1</span>])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代码复盘-2"><a href="#代码复盘-2" class="headerlink" title="代码复盘"></a>代码复盘</h3><p>1、巧妙利用 i 作为滑动窗口右边界，i-k+1 作为滑动窗口左边界</p><p>2、对于示例一的特例，通过初始化 ans :&#x3D; nums[k-1] - nums[0] 来解决</p><h2 id="643-子数组最大平均数-I"><a href="#643-子数组最大平均数-I" class="headerlink" title="643. 子数组最大平均数 I"></a><a href="https://leetcode.cn/problems/maximum-average-subarray-i/">643. 子数组最大平均数 I</a></h2><h3 id="题目描述：难度分（无）"><a href="#题目描述：难度分（无）" class="headerlink" title="题目描述：难度分（无）"></a>题目描述：难度分（无）</h3><p><img src="https://formyblog-1316637577.cos.ap-guangzhou.myqcloud.com/img/image-20240324181113924.png" alt="image-20240324181113924"></p><h3 id="代码与解题思路-3"><a href="#代码与解题思路-3" class="headerlink" title="代码与解题思路"></a>代码与解题思路</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findMaxAverage</span><span class="params">(nums []<span class="type">int</span>, k <span class="type">int</span>)</span></span> <span class="type">float64</span> &#123;</span><br><span class="line">    l, r, n, sum, ans := <span class="number">0</span>, <span class="number">0</span>, <span class="built_in">len</span>(nums), <span class="number">0</span>, -math.MaxInt/<span class="number">2</span></span><br><span class="line">    <span class="keyword">for</span> r &lt; n &#123;</span><br><span class="line">        sum += nums[r]</span><br><span class="line">        <span class="keyword">if</span> r-l == k<span class="number">-1</span> &#123;</span><br><span class="line">            ans = max(ans, sum)</span><br><span class="line">            sum -= nums[l]</span><br><span class="line">            l++</span><br><span class="line">        &#125;</span><br><span class="line">        r++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">float64</span>(ans)/<span class="type">float64</span>(k)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代码复盘-3"><a href="#代码复盘-3" class="headerlink" title="代码复盘"></a>代码复盘</h3><p>1、使用 -math.MaxInt&#x2F;2 作为 ans 的初值，既能防止溢出，又能保证他作为最小值</p><p>2、巧妙完成题目返回 float64 的要求：直接在最后进行强转 float64(ans)&#x2F;float64(k)</p><h2 id="1343-大小为-K-且平均值大于等于阈值的子数组数目"><a href="#1343-大小为-K-且平均值大于等于阈值的子数组数目" class="headerlink" title="1343. 大小为 K 且平均值大于等于阈值的子数组数目"></a><a href="https://leetcode.cn/problems/number-of-sub-arrays-of-size-k-and-average-greater-than-or-equal-to-threshold/">1343. 大小为 K 且平均值大于等于阈值的子数组数目</a></h2><h3 id="题目描述：难度分1317"><a href="#题目描述：难度分1317" class="headerlink" title="题目描述：难度分1317"></a>题目描述：难度分1317</h3><p><img src="https://formyblog-1316637577.cos.ap-guangzhou.myqcloud.com/img/image-20240324180932544.png" alt="image-20240324180932544"></p><h3 id="代码与解题思路-4"><a href="#代码与解题思路-4" class="headerlink" title="代码与解题思路"></a>代码与解题思路</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">numOfSubarrays</span><span class="params">(arr []<span class="type">int</span>, k <span class="type">int</span>, threshold <span class="type">int</span>)</span></span> (ans <span class="type">int</span>) &#123;</span><br><span class="line">    l, r, n, sum := <span class="number">0</span>, <span class="number">0</span>, <span class="built_in">len</span>(arr), <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> r &lt; n &#123;</span><br><span class="line">        sum += arr[r]</span><br><span class="line">        <span class="keyword">if</span> r-l == k<span class="number">-1</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> sum/k &gt;= threshold &#123;</span><br><span class="line">                ans++</span><br><span class="line">            &#125;</span><br><span class="line">            sum -= arr[l]</span><br><span class="line">            l++</span><br><span class="line">        &#125;</span><br><span class="line">        r++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代码复盘-4"><a href="#代码复盘-4" class="headerlink" title="代码复盘"></a>代码复盘</h3><p>直接用模板秒了，非常典型</p><h2 id="2090-半径为-k-的子数组平均值"><a href="#2090-半径为-k-的子数组平均值" class="headerlink" title="2090. 半径为 k 的子数组平均值"></a><a href="https://leetcode.cn/problems/k-radius-subarray-averages/">2090. 半径为 k 的子数组平均值</a></h2><h3 id="题目描述：难度分1358"><a href="#题目描述：难度分1358" class="headerlink" title="题目描述：难度分1358"></a>题目描述：难度分1358</h3><p><img src="https://formyblog-1316637577.cos.ap-guangzhou.myqcloud.com/img/image-20240325094348574.png" alt="image-20240325094348574"></p><h3 id="代码与解题思路-5"><a href="#代码与解题思路-5" class="headerlink" title="代码与解题思路"></a>代码与解题思路</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getAverages</span><span class="params">(nums []<span class="type">int</span>, k <span class="type">int</span>)</span></span> (ans []<span class="type">int</span>) &#123;</span><br><span class="line">    l, r, n, sum := <span class="number">0</span>, <span class="number">0</span>, <span class="built_in">len</span>(nums), <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> r &lt; n &#123;</span><br><span class="line">        sum += nums[r]</span><br><span class="line">        ans = <span class="built_in">append</span>(ans, <span class="number">-1</span>)</span><br><span class="line">        <span class="keyword">if</span> r-l == k*<span class="number">2</span> &#123; <span class="comment">// 窗口符合题目要求长度</span></span><br><span class="line">            <span class="keyword">if</span> k == <span class="number">0</span> &#123; <span class="comment">// 特判 k = 0 的情况</span></span><br><span class="line">                ans[r-k] = sum</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                ans[r-k] = sum/(k*<span class="number">2</span>+<span class="number">1</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            sum -= nums[l]</span><br><span class="line">            l++</span><br><span class="line">        &#125;</span><br><span class="line">        r++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代码复盘-5"><a href="#代码复盘-5" class="headerlink" title="代码复盘"></a>代码复盘</h3><p>同样是定长滑动窗口，相比之前的题目稍微灵活了一些，使用自己熟悉的模板，具体情况具体分析即可</p><h2 id="2379-得到-K-个黑块的最少涂色次数"><a href="#2379-得到-K-个黑块的最少涂色次数" class="headerlink" title="2379. 得到 K 个黑块的最少涂色次数"></a><a href="https://leetcode.cn/problems/minimum-recolors-to-get-k-consecutive-black-blocks/">2379. 得到 K 个黑块的最少涂色次数</a></h2><h3 id="题目描述：难度分1360"><a href="#题目描述：难度分1360" class="headerlink" title="题目描述：难度分1360"></a>题目描述：难度分1360</h3><p><img src="https://formyblog-1316637577.cos.ap-guangzhou.myqcloud.com/img/image-20240325095658481.png" alt="image-20240325095658481"></p><h3 id="代码与解题思路-6"><a href="#代码与解题思路-6" class="headerlink" title="代码与解题思路"></a>代码与解题思路</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">minimumRecolors</span><span class="params">(blocks <span class="type">string</span>, k <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    l, r, n, cnt, ans := <span class="number">0</span>, <span class="number">0</span>, <span class="built_in">len</span>(blocks), <span class="number">0</span>, math.MaxInt/<span class="number">2</span></span><br><span class="line">    <span class="keyword">for</span> r &lt; n &#123;</span><br><span class="line">        <span class="keyword">if</span> blocks[r] == <span class="string">&#x27;W&#x27;</span> &#123;</span><br><span class="line">            cnt++</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> r-l == k<span class="number">-1</span> &#123;</span><br><span class="line">            ans = min(ans, cnt)</span><br><span class="line">            <span class="keyword">if</span> blocks[l] == <span class="string">&#x27;W&#x27;</span> &#123;</span><br><span class="line">                cnt--</span><br><span class="line">            &#125;</span><br><span class="line">            l++</span><br><span class="line">        &#125;</span><br><span class="line">        r++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代码复盘-6"><a href="#代码复盘-6" class="headerlink" title="代码复盘"></a>代码复盘</h3><p>这次写代码又忘记 math.MaxInt 的拼写了，下次记住 mM 两个 m 打头</p><h2 id="1052-爱生气的书店老板"><a href="#1052-爱生气的书店老板" class="headerlink" title="1052. 爱生气的书店老板"></a><a href="https://leetcode.cn/problems/grumpy-bookstore-owner/">1052. 爱生气的书店老板</a></h2><h3 id="题目描述：难度分1418"><a href="#题目描述：难度分1418" class="headerlink" title="题目描述：难度分1418"></a>题目描述：难度分1418</h3><p><img src="https://formyblog-1316637577.cos.ap-guangzhou.myqcloud.com/img/image-20240325101915441.png" alt="image-20240325101915441"></p><h3 id="代码与解题思路-7"><a href="#代码与解题思路-7" class="headerlink" title="代码与解题思路"></a>代码与解题思路</h3><p>老板克制生气的时间，就是题目要求的滑动窗口的大小；老板不生气的时间就是基础的顾客人数数值；老板生气的时间，就是我们需要使用滑动窗口取人数最多的地方了。在老板克制生气的时间内找顾客最多的那个区间</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">maxSatisfied</span><span class="params">(customers []<span class="type">int</span>, grumpy []<span class="type">int</span>, minutes <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    l, r, n, sum, ans := <span class="number">0</span>, <span class="number">0</span>, <span class="built_in">len</span>(customers), <span class="number">0</span>, -math.MaxInt/<span class="number">2</span></span><br><span class="line">    <span class="keyword">for</span> i, v := <span class="keyword">range</span> customers &#123;</span><br><span class="line">        <span class="keyword">if</span> grumpy[i] == <span class="number">0</span> &#123;</span><br><span class="line">            sum += v</span><br><span class="line">            customers[i] = <span class="number">0</span> <span class="comment">// 巧妙置零</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> r &lt; n &#123;</span><br><span class="line">        sum += customers[r]</span><br><span class="line">        <span class="keyword">if</span> r-l == minutes<span class="number">-1</span> &#123;</span><br><span class="line">            ans = max(ans, sum)</span><br><span class="line">            sum -= customers[l]</span><br><span class="line">            l++</span><br><span class="line">        &#125;</span><br><span class="line">        r++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代码复盘-7"><a href="#代码复盘-7" class="headerlink" title="代码复盘"></a>代码复盘</h3><p>在计算基础顾客数值的时候，将计算之后的顾客人数置为 0，后面使用滑动窗口的时候，就不需要进行 if grumpy[r] &#x3D;&#x3D; 1 这样的判断了</p><h2 id="2841-几乎唯一子数组的最大和"><a href="#2841-几乎唯一子数组的最大和" class="headerlink" title="2841. 几乎唯一子数组的最大和"></a><a href="https://leetcode.cn/problems/maximum-sum-of-almost-unique-subarray/">2841. 几乎唯一子数组的最大和</a></h2><h3 id="题目描述：难度分1546"><a href="#题目描述：难度分1546" class="headerlink" title="题目描述：难度分1546"></a>题目描述：难度分1546</h3><p><img src="https://formyblog-1316637577.cos.ap-guangzhou.myqcloud.com/img/image-20240325110109864.png" alt="image-20240325110109864"></p><h3 id="代码与解题思路-8"><a href="#代码与解题思路-8" class="headerlink" title="代码与解题思路"></a>代码与解题思路</h3><p>这道题的重点就在，如何判断题目要求的所谓 “几乎唯一子数组”。用哈希判断即可，可以用数组模拟，也可以用语言自带的库。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">maxSum</span><span class="params">(nums []<span class="type">int</span>, m <span class="type">int</span>, k <span class="type">int</span>)</span></span> <span class="type">int64</span> &#123;</span><br><span class="line">    l, r, n, sum, ans, win := <span class="number">0</span>, <span class="number">0</span>, <span class="built_in">len</span>(nums), <span class="type">int64</span>(<span class="number">0</span>), <span class="type">int64</span>(<span class="number">0</span>), <span class="keyword">map</span>[<span class="type">int</span>]<span class="type">int</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> r &lt; n &#123;</span><br><span class="line">        win[nums[r]]++</span><br><span class="line">        sum += <span class="type">int64</span>(nums[r])</span><br><span class="line">        <span class="keyword">if</span> r-l == k<span class="number">-1</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(win) &gt;= m &#123;</span><br><span class="line">                ans = max(ans, sum)</span><br><span class="line">            &#125;</span><br><span class="line">            win[nums[l]]--</span><br><span class="line">            <span class="keyword">if</span> win[nums[l]] == <span class="number">0</span> &#123;</span><br><span class="line">                <span class="built_in">delete</span>(win, nums[l])</span><br><span class="line">            &#125;</span><br><span class="line">            sum -= <span class="type">int64</span>(nums[l])</span><br><span class="line">            l++</span><br><span class="line">        &#125;</span><br><span class="line">        r++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代码复盘-8"><a href="#代码复盘-8" class="headerlink" title="代码复盘"></a>代码复盘</h3><p>这道题是经典的哈希+滑窗，我也是第一次用 go 写这个类型，刚好可以积累积累 go 使用 map 的技巧：</p><p>1、go 的 map 可以用 len() 计算有多少个键值对</p><p>2、使用 delete(map, key) 可以删除 map 中键为 key 的键值对</p><h2 id="2461-长度为-K-子数组中的最大和"><a href="#2461-长度为-K-子数组中的最大和" class="headerlink" title="2461. 长度为 K 子数组中的最大和"></a><a href="https://leetcode.cn/problems/maximum-sum-of-distinct-subarrays-with-length-k/">2461. 长度为 K 子数组中的最大和</a></h2><h3 id="题目描述：难度分1553"><a href="#题目描述：难度分1553" class="headerlink" title="题目描述：难度分1553"></a>题目描述：难度分1553</h3><p><img src="https://formyblog-1316637577.cos.ap-guangzhou.myqcloud.com/img/image-20240325111457389.png" alt="image-20240325111457389"></p><h3 id="代码与解题思路-9"><a href="#代码与解题思路-9" class="headerlink" title="代码与解题思路"></a>代码与解题思路</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">maximumSubarraySum</span><span class="params">(nums []<span class="type">int</span>, k <span class="type">int</span>)</span></span> <span class="type">int64</span> &#123;</span><br><span class="line">    l, r, n, sum, ans, win := <span class="number">0</span>, <span class="number">0</span>, <span class="built_in">len</span>(nums), <span class="type">int64</span>(<span class="number">0</span>), <span class="type">int64</span>(<span class="number">0</span>), <span class="keyword">map</span>[<span class="type">int</span>]<span class="type">int</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> r &lt; n &#123;</span><br><span class="line">        win[nums[r]]++</span><br><span class="line">        sum += <span class="type">int64</span>(nums[r])</span><br><span class="line">        <span class="keyword">if</span> r-l == k<span class="number">-1</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(win) == k &#123;</span><br><span class="line">                ans = max(ans, sum)</span><br><span class="line">            &#125;</span><br><span class="line">            win[nums[l]]--</span><br><span class="line">            <span class="keyword">if</span> win[nums[l]] == <span class="number">0</span> &#123;</span><br><span class="line">                <span class="built_in">delete</span>(win, nums[l])</span><br><span class="line">            &#125;</span><br><span class="line">            sum -= <span class="type">int64</span>(nums[l])</span><br><span class="line">            l++</span><br><span class="line">        &#125;</span><br><span class="line">        r++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代码复盘-9"><a href="#代码复盘-9" class="headerlink" title="代码复盘"></a>代码复盘</h3><p>我的评价是跟上一道题目一毛一样，而且题目描述比上一道说的更加 “人话”。把 m 改成了 k 就过了。</p><h2 id="1423-可获得的最大点数"><a href="#1423-可获得的最大点数" class="headerlink" title="1423. 可获得的最大点数"></a><a href="https://leetcode.cn/problems/maximum-points-you-can-obtain-from-cards/">1423. 可获得的最大点数</a></h2><h3 id="题目描述：难度分1574"><a href="#题目描述：难度分1574" class="headerlink" title="题目描述：难度分1574"></a>题目描述：难度分1574</h3><p><img src="https://formyblog-1316637577.cos.ap-guangzhou.myqcloud.com/img/image-20240325113654229.png" alt="image-20240325113654229"></p><h3 id="代码与解题思路-10"><a href="#代码与解题思路-10" class="headerlink" title="代码与解题思路"></a>代码与解题思路</h3><p>题目说可以从行的开头或者结尾拿一张卡牌，求点数的最大和。由于我们只能从开头或末尾拿牌，所以最后剩下的牌必然是<strong>连续</strong>的，通过<strong>逆向思维</strong>，我们可以用滑动窗口求剩下的连续的卡牌的最小和，就能得出点数的最大和了。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">maxScore</span><span class="params">(cardPoints []<span class="type">int</span>, k <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    l, r, n, sumMin, sum, ans := <span class="number">0</span>, <span class="number">0</span>, <span class="built_in">len</span>(cardPoints), <span class="number">0</span>, <span class="number">0</span>, math.MaxInt/<span class="number">2</span></span><br><span class="line">    <span class="keyword">for</span> r &lt; n &#123;</span><br><span class="line">        sum += cardPoints[r]</span><br><span class="line">        sumMin += cardPoints[r]</span><br><span class="line">        <span class="keyword">if</span> r-l == n-k<span class="number">-1</span> &#123;</span><br><span class="line">            ans = min(ans, sumMin)</span><br><span class="line">            sumMin -= cardPoints[l]</span><br><span class="line">            l++</span><br><span class="line">        &#125;</span><br><span class="line">        r++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> k == <span class="built_in">len</span>(cardPoints) &#123; <span class="comment">// 拿起所有卡牌</span></span><br><span class="line">        <span class="keyword">return</span> sum</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum-ans</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代码复盘-10"><a href="#代码复盘-10" class="headerlink" title="代码复盘"></a>代码复盘</h3><p>通过总数 sum - ans 最小和，我们就能求出题目要求的最大和。</p><h2 id="2134-最少交换次数来组合所有的-1-II"><a href="#2134-最少交换次数来组合所有的-1-II" class="headerlink" title="2134. 最少交换次数来组合所有的 1 II"></a><a href="https://leetcode.cn/problems/minimum-swaps-to-group-all-1s-together-ii/">2134. 最少交换次数来组合所有的 1 II</a></h2><h3 id="题目描述：难度分1748"><a href="#题目描述：难度分1748" class="headerlink" title="题目描述：难度分1748"></a>题目描述：难度分1748</h3><p><img src="https://formyblog-1316637577.cos.ap-guangzhou.myqcloud.com/img/image-20240325141314180.png" alt="image-20240325141314180"></p><h3 id="代码与解题思路-11"><a href="#代码与解题思路-11" class="headerlink" title="代码与解题思路"></a>代码与解题思路</h3><p>这道题目也需要理解题目的要求，对题目的信息进行转化。题目要将所有 1 都聚集在一起，最差的情况我们需要把每个 1 都移动一遍，那我们可以让 1 的数量作为滑动窗口的大小，窗口中 1 存在的越多，证明需要移动的 1 就越少（窗口中全是 1 就是最后的答案）</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">minSwaps</span><span class="params">(nums []<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    k := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> _, v := <span class="keyword">range</span> nums &#123;</span><br><span class="line">        k += v</span><br><span class="line">    &#125;</span><br><span class="line">    nums = <span class="built_in">append</span>(nums, nums...) <span class="comment">// 环形数组</span></span><br><span class="line">    l, r, ans, sum, n := <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="built_in">len</span>(nums)</span><br><span class="line">    <span class="keyword">for</span> r &lt; n &#123; <span class="comment">// 滑动窗口</span></span><br><span class="line">        <span class="keyword">if</span> nums[r] == <span class="number">1</span> &#123;</span><br><span class="line">            sum++</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> r-l == k<span class="number">-1</span> &#123;</span><br><span class="line">            ans = max(ans, sum)</span><br><span class="line">            <span class="keyword">if</span> nums[l] == <span class="number">1</span> &#123;</span><br><span class="line">                sum--</span><br><span class="line">            &#125;</span><br><span class="line">            l++</span><br><span class="line">        &#125;</span><br><span class="line">        r++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> k-ans</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代码复盘-11"><a href="#代码复盘-11" class="headerlink" title="代码复盘"></a>代码复盘</h3><p>1、使用 nums &#x3D; append(nums, nums…) 将数组本身追加一份到数组后面，可以处理环形数组的问题</p><h2 id="2653-滑动子数组的美丽值"><a href="#2653-滑动子数组的美丽值" class="headerlink" title="2653. 滑动子数组的美丽值"></a><a href="https://leetcode.cn/problems/sliding-subarray-beauty/">2653. 滑动子数组的美丽值</a></h2><h3 id="题目描述：难度分1786"><a href="#题目描述：难度分1786" class="headerlink" title="题目描述：难度分1786"></a>题目描述：难度分1786</h3><p><img src="https://formyblog-1316637577.cos.ap-guangzhou.myqcloud.com/img/image-20240325150216936.png" alt="image-20240325150216936"></p><h3 id="代码与解题思路-12"><a href="#代码与解题思路-12" class="headerlink" title="代码与解题思路"></a>代码与解题思路</h3><p>这道题目的核心就在于，怎么判断一个数是不是美丽值，题目要求找倒数第 x 个数，如果每个都排序肯定会超时，也许可以用堆来维护区间内的单调性，但堆我用的不多，而且 go 的堆比较麻烦，我也没有什么好的思路</p><p>这道题目有一个可以利用的地方，他数据范围给了 -50~50，非常小，通过这个性质对整个数据范围进行计数，每次判断的时候：让 x 逐个减去当前值的个数，当 x &lt; 0 或者 x &#x3D; 0 的时候，证明当前这个数就是题目要找的美丽值了</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getSubarrayBeauty</span><span class="params">(nums []<span class="type">int</span>, k <span class="type">int</span>, x <span class="type">int</span>)</span></span> []<span class="type">int</span> &#123;</span><br><span class="line">    cnt := [<span class="number">110</span>]<span class="type">int</span>&#123;&#125;   </span><br><span class="line">    l, r, n := <span class="number">0</span>, <span class="number">0</span>, <span class="built_in">len</span>(nums)</span><br><span class="line">    ans := <span class="built_in">make</span>([]<span class="type">int</span>, n-k+<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> r &lt; n &#123;</span><br><span class="line">        cnt[nums[r]+<span class="number">50</span>]++</span><br><span class="line">        <span class="keyword">if</span> r-l == k<span class="number">-1</span> &#123;</span><br><span class="line">            t := x</span><br><span class="line">            <span class="keyword">for</span> i, v := <span class="keyword">range</span> cnt[:<span class="number">50</span>] &#123;</span><br><span class="line">                t -= v</span><br><span class="line">                <span class="keyword">if</span> t &lt;= <span class="number">0</span> &#123; <span class="comment">// 当前这个数是美丽值</span></span><br><span class="line">                    ans[l] = i<span class="number">-50</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            cnt[nums[l]+<span class="number">50</span>]--</span><br><span class="line">            l++</span><br><span class="line">        &#125;</span><br><span class="line">        r++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代码复盘-12"><a href="#代码复盘-12" class="headerlink" title="代码复盘"></a>代码复盘</h3><p>1、注意观察题目的数据范围，说不定有可以利用的地方，就像本题利用计数排序的思想巧妙求出倒数第 x 个数</p><h2 id="567-字符串的排列"><a href="#567-字符串的排列" class="headerlink" title="567. 字符串的排列"></a><a href="https://leetcode.cn/problems/permutation-in-string/">567. 字符串的排列</a></h2><h3 id="题目描述：难度分（无）-1"><a href="#题目描述：难度分（无）-1" class="headerlink" title="题目描述：难度分（无）"></a>题目描述：难度分（无）</h3><p><img src="https://formyblog-1316637577.cos.ap-guangzhou.myqcloud.com/img/image-20240325160641166.png" alt="image-20240325160641166"></p><h3 id="代码与解题思路-13"><a href="#代码与解题思路-13" class="headerlink" title="代码与解题思路"></a>代码与解题思路</h3><p>如何判断是两个子串是相同的排列是这道题的核心问题，我们可以通过 cnt 数组记录每个字母的个数，遍历的时候–，如果此时的 cnt 数组内都是正数，就证明这两个子串字符的数量相同，即符合题目的条件</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">checkInclusion</span><span class="params">(s1 <span class="type">string</span>, s2 <span class="type">string</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">    cnt, l, r, n := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">26</span>), <span class="number">0</span>, <span class="number">0</span>, <span class="built_in">len</span>(s2)</span><br><span class="line">    <span class="keyword">for</span> _, v := <span class="keyword">range</span> s1 &#123;</span><br><span class="line">        cnt[v-<span class="string">&#x27;a&#x27;</span>]++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> r &lt; n &#123;</span><br><span class="line">        cnt[s2[r]-<span class="string">&#x27;a&#x27;</span>]--</span><br><span class="line">        <span class="keyword">if</span> r-l == <span class="built_in">len</span>(s1)<span class="number">-1</span> &#123;</span><br><span class="line">            flag := <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> _, v := <span class="keyword">range</span> cnt &#123;</span><br><span class="line">                <span class="keyword">if</span> v &lt; <span class="number">0</span> &#123;</span><br><span class="line">                    flag = <span class="number">1</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> flag == <span class="number">0</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">            cnt[s2[l]-<span class="string">&#x27;a&#x27;</span>]++</span><br><span class="line">            l++</span><br><span class="line">        &#125;</span><br><span class="line">        r++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代码复盘-13"><a href="#代码复盘-13" class="headerlink" title="代码复盘"></a>代码复盘</h3><p>1、Golang 也能通过 ‘a’ - ‘a’ 的形式获取到数字 0，通过这个性质我们可以构建字符数组 cnt</p><h2 id="438-找到字符串中所有字母异位词"><a href="#438-找到字符串中所有字母异位词" class="headerlink" title="438. 找到字符串中所有字母异位词"></a><a href="https://leetcode.cn/problems/find-all-anagrams-in-a-string/">438. 找到字符串中所有字母异位词</a></h2><h3 id="题目描述：难度分（无）-2"><a href="#题目描述：难度分（无）-2" class="headerlink" title="题目描述：难度分（无）"></a>题目描述：难度分（无）</h3><p><img src="https://formyblog-1316637577.cos.ap-guangzhou.myqcloud.com/img/image-20240325162036690.png" alt="image-20240325162036690"></p><h3 id="代码与解题思路-14"><a href="#代码与解题思路-14" class="headerlink" title="代码与解题思路"></a>代码与解题思路</h3><p>这道题跟上一道题几乎一模一样，稍微修改，把下标存入数组返回即可</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findAnagrams</span><span class="params">(s <span class="type">string</span>, p <span class="type">string</span>)</span></span> (ans []<span class="type">int</span>) &#123;</span><br><span class="line">    cnt, l, r, n := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">26</span>), <span class="number">0</span>, <span class="number">0</span>, <span class="built_in">len</span>(s)</span><br><span class="line">    <span class="keyword">for</span> _, v := <span class="keyword">range</span> p &#123;</span><br><span class="line">        cnt[v-<span class="string">&#x27;a&#x27;</span>]++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> r &lt; n &#123;</span><br><span class="line">        cnt[s[r]-<span class="string">&#x27;a&#x27;</span>]--</span><br><span class="line">        <span class="keyword">if</span> r-l == <span class="built_in">len</span>(p)<span class="number">-1</span> &#123;</span><br><span class="line">            flag := <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> _, v := <span class="keyword">range</span> cnt &#123;</span><br><span class="line">                <span class="keyword">if</span> v &lt; <span class="number">0</span> &#123;</span><br><span class="line">                    flag = <span class="number">1</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> flag == <span class="number">0</span> &#123;</span><br><span class="line">                ans = <span class="built_in">append</span>(ans, l)</span><br><span class="line">            &#125;</span><br><span class="line">            cnt[s[l]-<span class="string">&#x27;a&#x27;</span>]++</span><br><span class="line">            l++</span><br><span class="line">        &#125;</span><br><span class="line">        r++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代码复盘-14"><a href="#代码复盘-14" class="headerlink" title="代码复盘"></a>代码复盘</h3><p>同样的题目思路，无复盘</p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>题单还有两道困难题，因为超出能力范围所以暂时搁置</p><p><a href="https://leetcode.cn/problems/find-substring-with-given-hash-value/">2156. 查找给定哈希值的子串</a> 难度分2063</p><p><a href="https://leetcode.cn/problems/count-complete-substrings/">2953. 统计完全子字符串</a> 难度分2449</p>]]></content>
      
      
      <categories>
          
          <category> leetcode 算法刷题计划 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 滑动窗口 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode 算法刷题计划</title>
      <link href="/2024/032623878.html"/>
      <url>/2024/032623878.html</url>
      
        <content type="html"><![CDATA[<p>【计划介绍】</p><p>为了提升算法能力，在笔试、面试、LeetCode 周赛都能取得好成绩，我决定在这个阶段把灵神推荐的题单刷上一遍</p><p>【专题题单】</p><p>【题单】滑动窗口（定长&#x2F;不定长&#x2F;多指针）：<a href="https://leetcode.cn/circle/discuss/0viNMK/">https://leetcode.cn/circle/discuss/0viNMK/</a></p><p>【题单】二分算法（二分答案&#x2F;最小化最大值&#x2F;最大化最小值&#x2F;第K小）：<a href="https://leetcode.cn/circle/discuss/SqopEo/">https://leetcode.cn/circle/discuss/SqopEo/</a></p><p>【题单】单调栈（矩形系列&#x2F;字典序最小&#x2F;贡献法）：<a href="https://leetcode.cn/circle/discuss/9oZFK9/">https://leetcode.cn/circle/discuss/9oZFK9/</a></p><p>【题单】网格图（DFS&#x2F;BFS&#x2F;综合应用）：<a href="https://leetcode.cn/circle/discuss/YiXPXW/">https://leetcode.cn/circle/discuss/YiXPXW/</a></p><p>【题单】位运算（基础&#x2F;性质&#x2F;拆位&#x2F;试填&#x2F;恒等式&#x2F;贪心&#x2F;脑筋急转弯）：<a href="https://leetcode.cn/circle/discuss/dHn9Vk/">https://leetcode.cn/circle/discuss/dHn9Vk/</a></p><p>【题单】图论算法（DFS&#x2F;BFS&#x2F;拓扑排序&#x2F;最短路&#x2F;最小生成树&#x2F;二分图&#x2F;基环树&#x2F;欧拉路径）：<a href="https://leetcode.cn/circle/discuss/01LUak/">https://leetcode.cn/circle/discuss/01LUak/</a></p><p>【题单】动态规划（入门&#x2F;背包&#x2F;状态机&#x2F;划分&#x2F;区间&#x2F;状压&#x2F;数位&#x2F;树形&#x2F;数据结构优化）：<a href="https://leetcode.cn/circle/discuss/tXLS3i/">https://leetcode.cn/circle/discuss/tXLS3i/</a></p><p>【周赛题单】</p><p>【2022 年周赛题目总结（上篇）】：<a href="https://leetcode.cn/circle/discuss/G0n5iY/">https://leetcode.cn/circle/discuss/G0n5iY/</a></p><p>【2022 年周赛题目总结（下篇）】：<a href="https://leetcode.cn/circle/discuss/WR1MJP/">https://leetcode.cn/circle/discuss/WR1MJP/</a></p><p>【2023 上半年周赛题目总结】：<a href="https://leetcode.cn/circle/discuss/v2RXSN/">https://leetcode.cn/circle/discuss/v2RXSN/</a></p><p>【2023 下半年周赛题目总结】：<a href="https://leetcode.cn/circle/discuss/lUu0KB/">https://leetcode.cn/circle/discuss/lUu0KB/</a></p>]]></content>
      
      
      <categories>
          
          <category> leetcode 算法刷题计划 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你好，欢迎来到我的博客</title>
      <link href="/2024/031856237.html"/>
      <url>/2024/031856237.html</url>
      
        <content type="html"><![CDATA[<p>自我介绍还没想好，随便逛逛吧~</p>]]></content>
      
      
      <categories>
          
          <category> 自我介绍 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自我介绍 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
